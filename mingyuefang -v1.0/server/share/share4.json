{
  "infodetail":[{"id":"0","contence":"<article><header><h2 ng-bind=\"title\"></h2><h2 class=\"small\" ng-bind=\"subtitle\"></h2></header><p>Vue 2.0 支持服务端渲染 (SSR)，并且是流式的，可以做组件级的缓存，这使得极速渲染成为可能。vue-hackernews-2.0 是 Vue 作者在GitHub上面放的 Vue 2.0 的一个示例项目，结合 Express、vue-router & vuex 来构建，是很好的学习案例</p><img class=\"img-responsive\" src=\"../source/img/share/qdkf/1.1.png\" alt=\"\"> <h3>Features</h3><ul> <li>Server Side Rendering <ul> <li>Vue + vue-router + vuex working together</li> <li>Server-side data pre-fetching</li> <li>Client-side state & DOM hydration</li></ul></li><li>Single-file Vue Components<ul> <li>Hot-reload in development</li><li>CSS extraction for production</li></ul></li><li>Real-time List Updates with FLIP Animation</li></ul><h3>Architecture Overview</h3><img class=\"img-responsive\"  src=\"../source/img/share/qdkf/1.2.png\" alt=\"\"><h3>Build Setup</h3><p class=\"small\">Requires Node.js 6+</p><pre style=\"text-align: left\"><span style=\"color: #969896;\"># install dependencies</span><span>npm install</span> <span style=\"color: #969896;\"># serve in dev mode, with hot reload at localhost:8080</span><span>npm run dev</span><span style=\"color: #969896;\"># build for production</span><span>npm run build</span><span style=\"color: #969896;\"># serve in production mode</span><span>npm start</span></pre></article>"},{"id":"1","contence":"<article>            <header>            <h2 ng-bind=\"title\"></h2>                <h2 class=\"small\" ng-bind=\"subtitle\"></h2>            </header>            <h3>起步</h3>            <hr>            <ul>            <li>扎实的 JavaScript / HTML / CSS 基本功。这是前置条件</li>    <li>通读官方教程 (guide) 的基础篇。不要用任何构建工具，就只用最简单的&lt;script&gt;,把教程里的例子模仿一遍，理解用法。不推荐上来就直接用 vue-cli 构建项目，尤其是如果没有 Node/Webpack 基础。</li>    <li>照着官网上的示例，自己想一些类似的例子，模仿着实现来练手，加深理解。</li>    <li>阅读官方教程进阶篇的前半部分，到『自定义指令 (Custom Directive) 』为止。着重理解 Vue 的响应式机制和组件生命周期。『渲染函数（Render Function)』如果理解吃力可以先跳过。</li><li>阅读教程里关于路由和状态管理的章节，然后根据需要学习 vue-router 和 vuex。同样的，先不要管构建工具，以跟着文档里的例子理解用法为主。</li><li>走完基础文档后，如果你对于基于 Node 的前端工程化不熟悉，就需要补课了。下面这些严格来说并不是 Vue 本身的内容，也不涵盖所有的前端工程化知识，但对于大型的 Vue 工程是前置条件，也是合格的『前端工程师』应当具备的知识。</li></ul><h3>前端生态/工程化</h3><hr><ul><li>了解 JavaScript 背后的规范，ECMAScript 的历史和目前的规范制定方式。学习 ES2015/16 的新特性，理解 ES2015 modules，适当关注还未成为标准的提案。</li><li>学习命令行的使用。建议用 Mac。</li><li>学习 Node.js 基础。建议使用nvm这样的工具来管理机器上的 Node 版本，并且将 npm 的 registry 注册表配置为至少要了解 npm 的常用命令，npm scripts 如何使用，语义化版本号规则，CommonJS 模块规范（了解它和 ES2015 Modules 的异同），Node 包的解析规则，以及 Node 的常用 API。应当做到可以自己写一些基本的命令行程序。注意最新版本的 Node (6+) 已经支持绝大部分 ES2015 的特性，可以借此巩固 ES2015。 </li><li>了解如何使用 / 配置 Babel 来将 ES2015 编译到 ES5 用于浏览器环境。</li><li>学习 Webpack。Webpack 是一个极其强大同时也复杂的工具，作为起步，理解它的『一切皆模块』的思想，并基本了解其常用配置选项和 loader 的概念/使用方法即可，比如如何搭配 Webpack 使用 Babel。学习 Webpack 的一个挑战在于其本身文档的混乱，建议多搜索搜索，应该还是有质量不错的第三方教程的。英文好的建议阅读 Webpack 2.0 的文档，比起 1.0 有极大的改善，但需要注意和 1.0 的不兼容之处。</li></ul><h3>Vue进阶</h3><hr><ul><li>有了 Node 和 Webpack 的基础，可以通过 vue-cli 来搭建基于 Webpack ，并且支持单文件组件的项目了。建议用 webpack-simple 这个模板开始，并阅读官方教程进阶篇剩余的内容以及 vue-loader 的文档，了解一些进阶配置。有兴趣的可以自己亲手从零开始搭一个项目加深理解。</li><li>深入理解 Virtual DOM 和『渲染函数 (Render Functions)』这一章节（可选择性使用 JSX)，理解模板和渲染函数之间的对应关系，了解其使用方法和适用场景。</li><li>（可选）根据需求，了解服务端渲染的使用（需要配合 Node 服务器开发的知识）。其实更重要的是理解它所解决的问题并搞清楚你是否需要它。</li><li>阅读开源的 Vue 应用、组件、插件源码，自己尝试编写开源的 Vue 组件、插件。</li><li>参考 贡献指南 阅读 Vue 的源码，理解内部实现细节。（需要了解 Flow）</li></ul></article>"},{"id":"2","contence":"<article>            <header>            <h2 ng-bind=\"title\"></h2>                <h2 class=\"small\" ng-bind=\"subtitle\"></h2>            </header>            <p>WebGL 是一项在网页浏览器呈现3D画面的技术，有别于过去需要安装浏览器插件，通过 WebGL 的技术，只需要编写网页代码即可实现3D图像的展示。WebGL 可以为 Canvas 提供硬件3D加速渲染，这样 Web 开发人员就可以借助系统显卡来在浏览器里更流畅地展示3D场景和模型了。</p>    <div>    <h3>Aquarium</h3>    <hr>    <img class=\"img-responsive\" src=\"../source/img/share/qdkf/3.1.jpg\" alt=\"\">        <p>Created by Greggman and Human Engines. The aquarium runs almost entirely based on a clock.That means the position of the camera and every fish will be the same across machines if their clocks are in sync. When in networked mode each machine keeps its clock in sync by periodically asking the server for the current time.</p>    </div>    <div>    <h3>Dreams of Black</h3>    <hr>    <img class=\"img-responsive\" src=\"../source/img/share/qdkf/3.2.jpg\"  alt=\"\">        <p>A Semi-Intereactive film authored by Chris Milk. It was developed using technology developed by Google and other sources.It works with chrome mixing 2D and 3D computer graphics, showcasing the song “Black” by Danger Mouse and Daniel Luppi ,with Norah Jones and Jack White.</p>    </div>    <div>    <h3>Cube</h3>    <hr>    <img class=\"img-responsive\" src=\"../source/img/share/qdkf/3.3.jpg\" alt=\"\">        <p>A WebGL innovative game inspired with Google maps technology. It consists of elements you see in Google Maps and analog labyrinth games combined with amazing controls that can break an experience.</p>    </div>    <div>    <h3>Chemdoodle</h3>    <hr>    <img class=\"img-responsive\" src=\"../source/img/share/qdkf/3.4.jpg\" alt=\"\">        <p>Chemdoodle is a scientific visualization which lets you pick one of a number of medicines and see a 3D display of its chemical structure on compatible browsers, developed by iChemLabs.</p>    </div>    <div>    <h3>Chrysaora</h3>    <hr>    <img class=\"img-responsive\" src=\"../source/img/share/qdkf/3.5.jpg\" alt=\"\">        <p>A dynamic Jellyfish WebGL demo built with Vladimir Vuki?evi?’s mjs matrix library. It showcases simulated skeletons, partial server-side simulation and synchronization with WebSocket, and camera facing a particle system and volumetric light effect.</p>    </div>    </article>"},{"id":"3","contence":"            <article>            <header>            <h2 ng-bind=\"title\"></h2>                <h2 class=\"small\" ng-bind=\"subtitle\"></h2>            </header>            <p>Waud.js 是一个Web音频库，有一个HTML5音频降级处理方案。 它允许您利用Web音频API为你的Web应用程序控制音频功能。在不支持Web音频API的非现代浏览器使用HTML5音频降级方案。</p>    <img src=\"../source/img/share/qdkf/4.1.jpg\" class=\"img-responsive\" alt=\"\">        </article>"}],"infoadd":[{"id":"0","recount":"阅读(202)","comcount":"评论(0)","thumb":"赞(6)","icon":"fa fa-thumbs-up","lab":"标签：Express / Vue"},{"id":"1","recount":"阅读(757)","comcount":"评论(0)","thumb":"赞(8)","icon":"fa fa-thumbs-up","lab":"标签：Vue / Vue.js"},{"id":"2","recount":"阅读(357)","comcount":"评论(0)","thumb":"赞(9)","icon":"fa fa-thumbs-up","lab":"标签：WebGL"},{"id":"3","recount":"阅读(397)","comcount":"评论(0)","thumb":"赞(6)","icon":"fa fa-thumbs-up","lab":"标签：HTML5 / Web"}],"infosummery":[{"id":"0","href":"","headcont":"使用Vue 2.0实现服务端渲染的HackerNews","subhe":"前端里-小鱼 发布于5天前","mediacont":"Vue2.0支持服务端渲染(SSR)，并且是流式的，可以做组件级的缓存，这使得极速渲染成为可能。vue-hackernews-2.0是Vue作者在GitHub上面放的Vue2.0的一个示例项目，结合Express、vue-router&vuex来构建，是很好的学习案例。&...","imgsrc":"../source/img/share/qdkf/1.png","alt":"qdkf"},{"id":"1","href":"","headcont":"新手入门指导：Vue 2.0 的建议学习顺序","subhe":"前端里-小鱼 发布于2周前","mediacont":"起步1.扎实的JavaScript/HTML/CSS基本功。这是前置条件。2.通读官方教程(guide)的基础篇.不要用任何构建工具，就只用最简单的&lt;script&gt;,把教程里的例子模仿一遍,理解用法.不推荐上来就直接用vue-cli构建项目,尤其是如果没有Node/W...","imgsrc":"../source/img/share/qdkf/2.jpg","alt":"qdkf"},{"id":"2","href":"","headcont":"不可思议的 WebGL 示例和演示","subhe":"前端里-小鱼 发布于2周前","mediacont":"WebGL 是一项在网页浏览器呈现3D画面的技术，有别于过去需要安装浏览器插件，通过WebGL的技术，只需要编写网页代码即可实现3D图像的展示。WebGL可以为Canvas提供硬件3D加速渲染，这样 Web 开发人员就可以借助系统显卡来在浏览器里更流畅地展示3D场景和模型了。在这...","imgsrc":"../source/img/share/qdkf/3.jpg","alt":"qdkf"},{"id":"3","href":"","headcont":"Waud.js – 使用HTML5降级处理的Web音频库","subhe":"前端里-小鱼 发布于3周前","mediacont":"Waud.js是一个Web音频库，有一个HTML5音频降级处理方案。它允许您利用Web音频API为你的Web应用程序控制音频功能。在不支持Web音频API的非现代浏览器使用HTML5音频降级方案。演示和源码下载...","imgsrc":"../source/img/share/qdkf/4.jpg","alt":"qdkf"}]
}